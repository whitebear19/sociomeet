# Generated by Django 3.1.2 on 2020-10-27 05:06

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField(default='', null=True)),
                ('post_id', models.IntegerField(default='', null=True)),
                ('content', models.TextField(default='', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'db_table': 'comments',
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField(default='', null=True)),
                ('detial', models.CharField(default='', max_length=250, null=True)),
                ('date_start', models.CharField(default='', max_length=250, null=True)),
                ('date_end', models.CharField(default='', max_length=250, null=True)),
                ('school', models.CharField(default='', max_length=250, null=True)),
                ('degree', models.CharField(default='', max_length=250, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'db_table': 'education',
            },
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField(default='', null=True)),
                ('title', models.CharField(default='', max_length=250, null=True)),
                ('date_start', models.CharField(default='', max_length=250, null=True)),
                ('date_end', models.CharField(default='', max_length=250, null=True)),
                ('company', models.CharField(default='', max_length=250, null=True)),
                ('position', models.CharField(default='', max_length=250, null=True)),
                ('responsibilities', models.TextField(default='', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'db_table': 'experience',
            },
        ),
        migrations.CreateModel(
            name='Follows',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('who', models.IntegerField(default='', null=True)),
                ('whom', models.IntegerField(default='', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'db_table': 'follows',
            },
        ),
        migrations.CreateModel(
            name='Likes',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField(default='', null=True)),
                ('post_id', models.IntegerField(default='', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'likes',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('room_id', models.IntegerField(default='', null=True)),
                ('user_id', models.IntegerField(default='', null=True)),
                ('content', models.TextField(default='', max_length=1000, null=True)),
                ('read', models.CharField(default='0', max_length=1, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'db_table': 'message',
            },
        ),
        migrations.CreateModel(
            name='PostAttach',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('post_id', models.IntegerField(default='', null=True)),
                ('attach', models.FileField(default='', null=True, upload_to='attach')),
                ('attachname', models.TextField(default='', max_length=250, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'postattach',
            },
        ),
        migrations.CreateModel(
            name='Posts',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.TextField(max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user_id', models.IntegerField(default='')),
                ('likes', models.IntegerField(default=0)),
                ('dislikes', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'posts',
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('who', models.IntegerField(default='', null=True)),
                ('whom', models.IntegerField(default='', null=True)),
                ('accepted', models.CharField(default='0', max_length=1, null=True)),
                ('status', models.CharField(default='', max_length=1, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'room',
            },
        ),
        migrations.CreateModel(
            name='Visiter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('who', models.IntegerField(default='', null=True)),
                ('whom', models.IntegerField(default='', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'db_table': 'visiter',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(default='', max_length=254, null=True, verbose_name='email address')),
                ('avatar', models.ImageField(default='', null=True, upload_to='avatar')),
                ('gender', models.CharField(default='', max_length=20, null=True)),
                ('location', models.CharField(default='', max_length=250, null=True)),
                ('connections', models.CharField(default='0', max_length=250, null=True)),
                ('views', models.CharField(default='0', max_length=250, null=True)),
                ('organization', models.CharField(default='', max_length=250, null=True)),
                ('website', models.CharField(default='', max_length=250, null=True)),
                ('jobtitle', models.CharField(default='', max_length=250, null=True)),
                ('phone', models.CharField(default='', max_length=250, null=True)),
                ('aboutme', models.TextField(default='', null=True)),
                ('linkInstagram', models.CharField(default='', max_length=250, null=True)),
                ('linkFacebook', models.CharField(default='', max_length=250, null=True)),
                ('linkTwitter', models.CharField(default='', max_length=250, null=True)),
                ('linkYoutube', models.CharField(default='', max_length=250, null=True)),
                ('linkGithub', models.CharField(default='', max_length=250, null=True)),
                ('birthYear', models.CharField(default='', max_length=250, null=True)),
                ('birthMonth', models.CharField(default='', max_length=250, null=True)),
                ('birthDay', models.CharField(default='', max_length=250, null=True)),
                ('company', models.CharField(default='', max_length=250, null=True)),
                ('position', models.CharField(default='', max_length=250, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
